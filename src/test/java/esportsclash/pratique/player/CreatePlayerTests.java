package esportsclash.pratique.player;

import esportsclash.pratique.player.application.usecases.CreatePlayerCommand;
import esportsclash.pratique.player.application.usecases.CreatePlayerCommandHandler;
import esportsclash.pratique.player.domain.model.Player;
import esportsclash.pratique.player.infrastructure.persistance.ram.InMemoryPlayerRepository;
import org.junit.Assert;
import org.junit.jupiter.api.Test;

public class CreatePlayerTests {

    // Test method to verify that players are created correctly.
    @Test
    void ShouldCreatePlayer() {
        // 1. Set up the test environment:
        // - Create a PlayerRepository instance to manage players.
        var repository = new InMemoryPlayerRepository();

        // - Create a CreatePlayerUseCase instance for handling player creation.
        var useCase = new CreatePlayerCommandHandler(repository);

        // 2. Execute the player creation logic:
        // - Call the use case's execute method with the player's name to create a new player.
        var command = new CreatePlayerCommand("name");
        var result = useCase.handle(command);

        // 3. Assert the expected outcome:
        // - Construct an expected Player object with the ID generated by the use case and the provided name.
        var expectedPlayer = new Player(result.getId(), "name");

        // - Retrieve the actual player created from the repository using the expected ID.
        Player actualPlayer = repository.findById(expectedPlayer.getId());

        // - Assert that the name of the actual player created matches the expected name.
        Assert.assertEquals(expectedPlayer.getName(), actualPlayer.getName());
    }


}
